// convex/passwordReset.ts
import { v } from "convex/values";
import { mutation, query } from "./_generated/server";
import { getAuthUserId } from "@convex-dev/auth/server";
import { Id } from "./_generated/dataModel";

// Generate secure random token
function generateResetToken(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < 32; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

// Request password reset
export const requestPasswordReset = mutation({
  args: {
    email: v.string(),
  },
  handler: async (ctx, args) => {
    // Find user by email (this depends on your auth table structure)
    const user = await ctx.db
      .query("users")
      .filter((q) => q.eq(q.field("email"), args.email))
      .first();

    if (!user) {
      // Don't reveal whether the email exists for security
      return { success: true, message: "If an account with this email exists, a reset link has been sent." };
    }

    // Check for existing active reset tokens
    const existingReset = await ctx.db
      .query("passwordResets")
      .withIndex("by_userId", (q) => q.eq("userId", user._id))
      .filter((q) => q.eq(q.field("isUsed"), false))
      .filter((q) => q.gt(q.field("expiresAt"), Date.now()))
      .first();

    if (existingReset) {
      // Rate limit: don't allow multiple reset requests within 5 minutes
      if (existingReset.requestedAt > Date.now() - 5 * 60 * 1000) {
        return { 
          success: false, 
          message: "A password reset email was already sent recently. Please check your email or try again in a few minutes." 
        };
      }
    }

    // Generate reset token
    const token = generateResetToken();
    const expiresAt = Date.now() + 60 * 60 * 1000; // 1 hour

    // Store reset token
    await ctx.db.insert("passwordResets", {
      userId: user._id,
      token,
      expiresAt,
      isUsed: false,
      requestedAt: Date.now(),
    });

    // TODO: Send email with reset link
    // For now, we'll just return the token (in production, this should be sent via email)
    console.log(`Password reset token for ${args.email}: ${token}`);

    return { 
      success: true, 
      message: "If an account with this email exists, a reset link has been sent.",
      // Remove this in production:
      devToken: token 
    };
  },
});

// Validate reset token
export const validateResetToken = query({
  args: {
    token: v.string(),
  },
  handler: async (ctx, args) => {
    const resetRecord = await ctx.db
      .query("passwordResets")
      .withIndex("by_token", (q) => q.eq("token", args.token))
      .first();

    if (!resetRecord) {
      return { valid: false, message: "Invalid reset token." };
    }

    if (resetRecord.isUsed) {
      return { valid: false, message: "This reset token has already been used." };
    }

    if (resetRecord.expiresAt <= Date.now()) {
      return { valid: false, message: "This reset token has expired." };
    }

    return { valid: true, userId: resetRecord.userId };
  },
});

// Reset password with token
export const resetPassword = mutation({
  args: {
    token: v.string(),
    newPassword: v.string(),
  },
  handler: async (ctx, args) => {
    // Validate token
    const resetRecord = await ctx.db
      .query("passwordResets")
      .withIndex("by_token", (q) => q.eq("token", args.token))
      .first();

    if (!resetRecord) {
      throw new Error("Invalid reset token.");
    }

    if (resetRecord.isUsed) {
      throw new Error("This reset token has already been used.");
    }

    if (resetRecord.expiresAt <= Date.now()) {
      throw new Error("This reset token has expired.");
    }

    // Validate password strength
    const { validatePasswordStrength } = await import("./authSecurity");
    const strength = validatePasswordStrength(args.newPassword);
    
    if (!strength.isValid) {
      throw new Error(`Password does not meet security requirements: ${strength.errors.join(", ")}`);
    }

    // Mark token as used
    await ctx.db.patch(resetRecord._id, { isUsed: true });

    // TODO: Update user password
    // This depends on how Convex Auth handles password updates
    // You might need to use the auth provider's password update method

    return { success: true, message: "Password has been reset successfully." };
  },
});

// Clean up expired reset tokens (can be called periodically)
export const cleanupExpiredTokens = mutation({
  handler: async (ctx) => {
    const expiredTokens = await ctx.db
      .query("passwordResets")
      .filter((q) => q.lt(q.field("expiresAt"), Date.now()))
      .collect();

    for (const token of expiredTokens) {
      await ctx.db.delete(token._id);
    }

    return { cleaned: expiredTokens.length };
  },
});
